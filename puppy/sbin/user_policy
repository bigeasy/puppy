#!/bin/bash

# Generates a policy module for a user account on a Puppy machine and loads the
# module into the kernel.

# Import common functions for job shell programs.
. /puppy/bin/functions

# Assert that the arguments are valid.
[ $# -ne 1 ] && abend "Incorrect count of arguments ($#)."

user=$1

assert_valid_user $user

uid=$(($user + 10000))

# Get the current policy version for the user.
version=$(/usr/bin/sudo -u delegate /puppy/bin/user_policy_version $(/bin/hostname) $user)

# Get the targeted policy version.
target_version=$(/usr/bin/sudo -u delegate /puppy/bin/policy_version $(/bin/hostname) $user)

# Rebuild if it is brand new or less than the maximum version.
rebuild=0
updating=0
if [ $version -eq 0 ]; then
    rebuild=1
elif [ $version -lt $target_version ]; then
    rebuild=1
    updating=1
fi

if [ $rebuild -eq 0 ]; then
    exit 0
fi

# Create a directory.
/bin/mkdir -p /var/cache/puppy/policy/u$uid

# Generate a policy file.
cat <<EOL > /var/cache/puppy/policy/u$uid/protected_u$uid.te
policy_module(protected_u$uid, 1.0.0)

role protected_${uid}_r;

userdom_restricted_user_template(protected_${uid}_t)

gen_user(protected_${uid}_u,, protected_${uid}_r, s0, s0)
EOL

# Build the policy. If the build is successful, reload it.
output=$(cd /var/cache/puppy/policy/u$uid && /usr/bin/make -f /usr/share/selinux/devel/Makefile)
echo "$output"
if [ $? -eq 0 ]; then
    /usr/sbin/semodule -i /var/cache/puppy/policy/u$uid/protected_u$uid.pp
else
    echo $output 1>&2
    exit 1
fi

/usr/bin/sudo -u delegate /puppy/bin/policy_version $(/bin/hostname) $user $target_version

# If we are updating then enqueue the next update.
if [ $updating -eq 1 ]; then
    /usr/bin/sudo -u delegate /puppy/bin/policy_enqueue_update $(/bin/hostname)
fi
