#!/bin/bash

# Utilities.
# -------------------------------------------------------------------------- #

# Emit an error message to stderr and return a non-zero exit code.
function abend()
{
    message=$1
    echo "ERROR: $message" 1>&1
    exit 1
}

deploy=$(readlink -f $0)

. $(/usr/bin/dirname $deploy)/functions

# Installation configuration.
# -------------------------------------------------------------------------- #

# Argument validation.
[ $# -eq 1 ] && [ -d $1 ] || abend "Must provide a working directory."

# Fetch the directory name to determine the owner of the installed files.
project=$(readlink -f $1)
basename=$(basename $project)

user=$basename

# Change directory to the project directory.
cd $project

# Build Node.js and CoffeeScript programs.
# -------------------------------------------------------------------------- #

umask 022

for source in $(/bin/find src -mindepth 2 -name \*.coffee)
do
    dir=$(/usr/bin/dirname $source | sed 's/src\///')
    program=$(/bin/basename $source | sed 's/.coffee$//')
    dest=$dir/$program
    if is_dirty $source $dest
    then
        echo "Rebuildering $source."
        /bin/mkdir -p $dir
        if [ $(/usr/bin/dirname $dir) == "lib" ]
        then
            /opt/bin/coffee -c -p $source > $dest
        else
            echo "#!/usr/bin/env node" > $dest
            /opt/bin/coffee -c -p $source >> $dest
        fi
    fi
done

# Choose permissions.
# -------------------------------------------------------------------------- #

# Chose an owner and mode based on the project directory name. Slightly kludgey.
if [ $basename == "janitor" -o $basename == "common" ]; then
    mode=755
else
    mode=550
fi

umask $(/usr/bin/printf "%03o" $(( ~(8#$mode) & 8#777 )))

# Install shell programs.
# -------------------------------------------------------------------------- #

# Create the mount point if it doesn't exist already.
/usr/bin/sudo mkdir -m $mode -p /puppy/$basename
/usr/bin/sudo chown $user:$user /puppy/$basename

# Install bash programs.
/usr/bin/sudo "$(dirname $deploy)/install_shell" $user $mode puppy/$basename/bin \
                                                             puppy/$basename/sbin

# Install Node.js and CoffeeScript programs.
# -------------------------------------------------------------------------- #

# Create our own custom installer.
install="/usr/bin/sudo /usr/bin/install -m $mode -o $user -g $user"

# We don't prattle on about installing node programs since they are installed
# every time we run the script.
if [ -d src -a ! -d lib ]; then
    /usr/bin/sudo /bin/mkdir -p /puppy/$basename/bin
    dest=/puppy/$basename/bin
    for coffee in $(find src/bin -name \*.coffee | /bin/sort); do
        program=$(echo $coffee | /bin/sed 's/src\/bin\/\(.*\).coffee$/\1/')
        if [ -e "bin/$program" ] && is_dirty bin/$program $dest/$program
        then
            echo "Installing $dest/$program."
            $install "bin/$program" $dest/$program
        fi
    done
fi

# Install launcher scripts for try/catch wrapped programs.
if [ -e src/try.conf ]
then
    while read file
    do
        program=$(echo $file | /bin/sed 's/^\(.*\).coffee/\1/')
        dest="/puppy/$basename/bin/${program}_try"
        if is_dirty /puppy/janitor/bin/launcher $dest
        then
            echo "Installing $dest."
            $install /puppy/janitor/bin/launcher $dest
        fi
    done < src/try.conf
fi

# Special case for worker branch, install sudo or medo launchers.
if [ $basename == "worker" ]; then
    while read line
    do
        fields=($line)
        source="src/${fields[1]}.js"
        dest="/puppy/worker/bin/${fields[0]}"
        if is_dirty $source $dest
        then
            echo "Installing $dest."
            $install $source $dest
        fi
    done < src/doers.conf
elif [ $basename == "common" ]; then
    install="/usr/bin/sudo /usr/bin/install -o $user -g $user"
    /usr/bin/sudo /bin/mkdir -p /puppy/common/lib/node/common/lib
    /usr/bin/sudo /bin/mkdir -m 550  -p /puppy/common/lib/node/common/queries
    $install -m 444 public.js /puppy/common/lib/node/common/
    $install -m 444 lib/shell lib/syslog /puppy/common/lib/node/common/lib/
    $install -m 440 private.js /puppy/common/lib/node/common/
    $install -m 440 queries/* /puppy/common/lib/node/common/queries/
    $install -m 440 lib/system /puppy/common/lib/node/common/lib/
fi

/usr/bin/sudo chown -R root:$user /puppy/$basename
/usr/bin/sudo /sbin/restorecon -R /puppy
