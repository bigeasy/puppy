#!/bin/bash

host=$1

abend() {
    local message=$1
    echo "fatal: $message" 1>&2
    exit 1
}

[ -z "$(ssh-add -l)" ] && abend "ssh-agent has no keys"

sed '1,/^exit 0$/d' $0 | ssh -l root "$host" "cat > ~/bootstrap.keys"

# Note that, should I ever have a deployment that requires a non-root user
# with sudo privileges, it would require a bootstrap through sudo, would
# require asking ssh to work with a pseudo-tty, and some determinations as
# to the actual sudoer in the script itself (see below). For now, all our
# targets; DigitalOcean, AWS and a base install boostrap using `root`.

#ssh -q -tt "$user" 'sudo bash ~/bootstrap.keys '"'""$(ssh-add -L)""'"
ssh -l root "$host" 'bash ~/bootstrap.keys '"'""$(ssh-add -L)""'"

exit 0
keys="$1"

abend() {
    local message=$1
    echo "$message" 1>&2
    exit 1
}

[ "$USER" = root ] || abent "Must run as root."
if [ -z "$SUDO_USER" ]; then
    SUDO_USER=root
fi
SUDO_HOME=$(grep "^$SUDO_USER" /etc/passwd | cut -f6 -d:)

# Create home keys for sudoer.

umask 077
mkdir -p "$SUDO_HOME/.ssh" || abend 'Cannot create `.ssh` directory.'
echo "$keys" >> "$SUDO_HOME/.ssh/authorized_keys"

unique_keys=$(sort "$SUDO_HOME/.ssh/authorized_keys" | uniq)
echo "$unique_keys" > "$SUDO_HOME/.ssh/authorized_keys"

chmod -R go-rwx "$SUDO_HOME/.ssh"

restorecon -R "$SUDO_HOME"

if ! grep '^janitor:' /etc/group > /dev/null; then
    /usr/sbin/groupadd --gid 701 janitor
fi

if ! grep '^janitor:' /etc/passwd > /dev/null; then
    /usr/sbin/useradd --gid 701 --uid 701 janitor
fi

if [ ! -d /home/janitor ]; then
    mkdir /home/janitor
fi

sed -i -e '/UseDNS  *yes/d' /etc/ssh/sshd_config
if ! grep '^UseDNS no' /etc/ssh/sshd_config > /dev/null; then
    echo "UseDNS no" >> /etc/ssh/sshd_config
    service sshd restart
fi
