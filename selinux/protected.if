template(`protected_sudo_private',`
    gen_require(`
        type $2_private_catch_t, $2_private_catch_exec_t;
    ')
')
# TODO Probably unnecessary.
template(`protected_program',`
    # Domain types for proxy and job.
    type $1_t;

    # Role assignments for proxy and job.
    role system_r types $1_t;

    # The executable type.
    type $1_exec_t;

    # Application domains for proxy and job.
    application_domain($1_t, $1_exec_t)

    # Transition from worker to the proxy domain, from the transition program to
    # the sudo domain, from sudo domain to the job domain.
    domtrans_pattern(protected_t, $1_exec_t, $1_t)

    # sudo will attempt to read and write to stdin and stdout.
    dontaudit $1_t protected_t:fifo_file rw_fifo_file_perms;

    # The working script will report to the proxy script via stdio.
#    allow $1_t $1_proxy_t:fifo_file rw_fifo_file_perms;

    # The transition program is always a Node.js program.
    puppy_node_exec($1_t)

    # Read and write to stdin, stout and stderr.
    allow $1_t self:fifo_file rw_fifo_file_perms;

    # The proxy needs to execute Puppy executables.
    puppy_exec_puppy_bin($1_t)

    # Allow worker to read the NPM link to the executable.
    allow protected_t $1_exec_t:lnk_file read;

    # Alllow the proxy to read the NPM link to the executable.
    allow $1_t $1_exec_t:lnk_file read;
')
