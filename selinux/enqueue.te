# Policy module for administration enqueue.
policy_module(enqueue,1.0.0)

require {
    type worker_spool_t, worker_job_exec_t, worker_job_t;
}

########################################
# Declarations
role enqueue_r;             # The enqueue role.
type enqueue_agent_t;       # Sends requests to remote machines via ssh.
type enqueue_proxy_t;       # Accepts ssh requests to enqueue.
type enqueue_exec_t;        # The enqueue program types.

############################################################################
### Policy for `enqueue` user and the `enqueue_proxy` program.
############################################################################

# This will create basic roll and the enqueue_t. 
puppy_restricted_user_template(enqueue)

# Both worker_job_t and enqueue_proxy_t assume enqueue_r.
role enqueue_r types enqueue_proxy_t;
role enqueue_r types worker_job_t;

# The `enqueue` user can execute the `enqueue` program.
domtrans_pattern(enqueue_t, enqueue_exec_t, enqueue_proxy_t)
allow enqueue_t enqueue_exec_t:lnk_file read;

# The `enqueue` proxy is a Node.js program.
puppy_node_exec(enqueue_proxy_t)
application_domain(enqueue_proxy_t, enqueue_exec_t)
allow enqueue_proxy_t enqueue_exec_t:lnk_file read;
allow enqueue_proxy_t self:fifo_file rw_fifo_file_perms;

# Allow syslog messages.
logging_send_syslog_msg(enqueue_proxy_t)

# The proxy domain type can sudo to add the job.
sudo_role_template(enqueue, enqueue_r, enqueue_proxy_t)
domtrans_pattern(enqueue_sudo_t, worker_job_exec_t, worker_job_t)
allow worker_job_t enqueue_proxy_t:fifo_file rw_fifo_file_perms;

############################################################################
### Policy for `enqueue` program.
############################################################################

# The `enqueue` program is a Node.js program.
puppy_node_exec(enqueue_agent_t)
application_domain(enqueue_agent_t, enqueue_exec_t)
allow enqueue_agent_t enqueue_exec_t:lnk_file read;
allow enqueue_agent_t self:fifo_file rw_fifo_file_perms;

# Allow syslog messages.
logging_send_syslog_msg(enqueue_agent_t)

# Execute SSH.
ssh_exec(enqueue_agent_t)

# Allow SSH TCP.
allow enqueue_agent_t self:tcp_socket create_stream_socket_perms;
allow enqueue_agent_t self:netlink_route_socket r_netlink_socket_perms;
corenet_tcp_connect_ssh_port(enqueue_agent_t)

# SSH needs to read certificates.
miscfiles_read_certs(enqueue_agent_t)

# Enqueue user.
gen_user(enqueue_u,, enqueue_r, s0, s0)
