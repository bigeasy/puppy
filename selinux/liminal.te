# Policy module for the liminal interface.
policy_module(liminal, 1.0.0)

role liminal_r;

gen_require(`
    type private_liminal_t, private_liminal_exec_t;
')

# Create a serverly restricted user.
puppy_restricted_user_template(liminal)

type liminal_receptionist_t;    # Invokes the liminal program as the puppy user.
type liminal_receptionist_exec_t;     # Use for both the proxy and the receptionist program.

puppy_sudo(liminal_receptionist)

role liminal_r types liminal_receptionist_t;
role liminal_r types liminal_receptionist_sudo_t;

puppy_private_role_redux(liminal)

# Domain transition to the liminal angent domain.
domtrans_pattern(liminal_t, liminal_receptionist_exec_t, liminal_receptionist_t)
application_domain(liminal_receptionist_t, liminal_receptionist_exec_t)
puppy_read_puppy_bin(liminal_t)
read_lnk_files_pattern(liminal_t, liminal_receptionist_exec_t, liminal_receptionist_exec_t);

# The liminal proxy program is a Node.js program.
puppy_node_exec(liminal_receptionist_t)
allow liminal_receptionist_t self:fifo_file rw_fifo_file_perms;
puppy_read_puppy_bin(liminal_receptionist_t)
puppy_exec_puppy_bin(liminal_receptionist_t)

read_lnk_files_pattern(liminal_receptionist_t, liminal_receptionist_exec_t, liminal_receptionist_exec_t);

# Transition to the private_liminal_t type.
domtrans_pattern(liminal_receptionist_sudo_t, private_liminal_exec_t, private_liminal_t)
read_lnk_files_pattern(liminal_receptionist_t, private_liminal_t, private_liminal_t)
allow private_liminal_t liminal_receptionist_t:fifo_file rw_fifo_file_perms;
allow private_liminal_t liminal_receptionist_t:fifo_file rw_fifo_file_perms;

logging_send_syslog_msg(liminal_receptionist_t)

# Generate the liminal user.
gen_user(liminal_u,, liminal_r, s0, s0)
