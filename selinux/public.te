# Policy module for the public interface.
policy_module(public, 1.1.2)

role public_r;

gen_require(`
    type private_public_exec_t, private_public_t;
')

type public_receptionist_exec_t;     # The public receptionist executable.
type public_receptionist_t;          # The public receptionist domain.

puppy_sudo(public_receptionist)      # The public role exists soley to sudo.

# The public roles.
role public_r types public_receptionist_t;
role public_r types public_receptionist_sudo_t;

# The public role 
puppy_private_role_redux(public)

# Create a restricted user, this will create basic roll and the public_t. 
puppy_restricted_user_template(public)

# Domain transition to the public angent domain.
domtrans_pattern(public_t, public_receptionist_exec_t, public_receptionist_t)
application_domain(public_receptionist_t, public_receptionist_exec_t)
puppy_read_puppy_bin(public_t)
read_lnk_files_pattern(public_t, public_receptionist_exec_t, public_receptionist_exec_t);

# The public proxy program is a Node.js program.
puppy_node_exec(public_receptionist_t)
allow public_receptionist_t self:fifo_file rw_fifo_file_perms;
puppy_exec_puppy_bin(public_receptionist_t)
puppy_read_puppy_bin(public_receptionist_t)

read_lnk_files_pattern(public_receptionist_t, public_receptionist_exec_t, public_receptionist_exec_t);

# Transition to the private_public_t type.
domtrans_pattern(public_receptionist_sudo_t, private_public_exec_t, private_public_t)
read_lnk_files_pattern(public_receptionist_t, private_public_t, private_public_t)
allow private_public_t public_receptionist_t:fifo_file rw_fifo_file_perms;

# Write to the system log.
logging_send_syslog_msg(public_receptionist_t)

# Generate the public user.
gen_user(public_u,, public_r, s0, s0)
