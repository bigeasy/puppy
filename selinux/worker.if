
########################################
### <summary>
###  Create a set of derived types for Puppy worker jobs that operate as the
###  worker daemon user.
### </summary>
### <param name="prefix">
###  <summary>
###  The prefix to be used for deriving type names.
###  </summary>
### </param>
##
#
template(`puppy_worker_job',`
    # Job domain type.
    type $1_job_t;

    # Role assignment for job domains.
    role system_r types $1_job_t;

    # The executable type.
    type $1_exec_t;

    # Create the application domains.
    application_domain($1_job_t, $1_exec_t)

    # Transition from worker to the job domain.
    domtrans_pattern(worker_t, $1_exec_t, $1_job_t)

    # The job program is a Node.js program.
    puppy_node_exec($1_job_t)
    puppy_exec_puppy_bin($1_job_t)
    allow worker_t $1_exec_t:lnk_file read;
    allow $1_job_t $1_exec_t:lnk_file read;
    
    ## Read/Write Pipes.
    allow $1_job_t self:fifo_file rw_fifo_file_perms;
')

########################################
### <summary>
###  Create a set of derived types for Puppy worker jobs that operate as root.
### </summary>
### <param name="prefix">
###  <summary>
###  The prefix to be used for deriving type names.
###  </summary>
### </param>
##
#
template(`puppy_job_sudo_root',`
    # Domain types for proxy and job.
    type $1_proxy_t;
    type $1_t;

    # Role assignments for proxy and job.
    role system_r types $1_proxy_t;
    role system_r types $1_t;

    # The executable type.
    type $1_exec_t;

    # Application domains for proxy and job.
    application_domain($1_t, $1_exec_t)
    application_domain($1_proxy_t, $1_exec_t)

    # Transition from worker to the proxy domain, from the transition program to
    # the sudo domain, from sudo domain to the job domain.
    domtrans_pattern(worker_t, $1_exec_t, $1_proxy_t)
    sudo_role_template($1_proxy, system_r, $1_proxy_t)
    domtrans_pattern($1_proxy_sudo_t, $1_exec_t, $1_t)

    # sudo will attempt to read and write to stdin and stdout.
    dontaudit $1_proxy_sudo_t worker_t:fifo_file rw_fifo_file_perms;

    # The working script will report to the proxy script via stdio.
    allow $1_t $1_proxy_t:fifo_file rw_fifo_file_perms;

    # The transition program is always a Node.js program.
    puppy_node_exec($1_proxy_t)

    # The working program is always a shell program.
    puppy_shell_exec($1_t)

    # Read and write to stdin, stout and stderr.
    allow $1_t self:fifo_file rw_fifo_file_perms;

    # Allow stdin, stdout and stderr to propagate.
    allow $1_proxy_sudo_t worker_t:fifo_file rw_fifo_file_perms;

    # The proxy needs to execute Puppy executables.
    puppy_exec_puppy_bin($1_proxy_t)

    # The proxy needs to read Puppy executables.
    puppy_read_puppy_sbin($1_proxy_sudo_t)

    # The agent needs to execute Puppy system executables.
    puppy_exec_puppy_sbin($1_t)

    # Allow worker to read the NPM link to the executable.
    allow worker_t $1_exec_t:lnk_file read;

    # Alllow the proxy to read the NPM link to the executable.
    allow $1_proxy_t $1_exec_t:lnk_file read;
')
########################################
### <summary>
###  Allow a worker job to execute the private program as puppy.
### </summary>
### <param name="domain">
###  <summary>
###  The worker job domain that will execute the private program as puppy.
###  </summary>
### </param>
##
#
# Allow a job to sudo to execute a private facility.
#   $1 - job program name, i.e. port_unlabel
template(`job_sudo_system',`
    puppy_sudo($1_job)
    role system_r types $1_job_sudo_t;
    # Allow sudo to write error messages.
    allow $1_job_sudo_t worker_t:fifo_file rw_fifo_file_perms;
    read_files_pattern($1_job_sudo_t, puppy_lib_t, puppy_lib_t)
')
template(`job_sudo_delegate',`
    puppy_sudo($1)
    role system_r types $1_sudo_t;
    allow $1_sudo_t $1_proxy_t:fifo_file rw_fifo_file_perms;
    allow $1_sudo_t worker_t:fifo_file rw_fifo_file_perms;
')
template(`job_delegate_trans',`
    puppy_sudo_delegate($1, $2)
    puppy_delegate_role(system, $1, $2)
    allow $2_delegate_t $1_proxy_t:fifo_file rw_fifo_file_perms;
')
# Transition from a job program to a system utility program.
#   $1 - the job program, i.e. port_unlabel
#   $2 - the system utility program, i.e. port_list
template(`job_system_trans',`
    gen_require(`
        type $2_system_t;
    ')
    puppy_sudo_system($1_job, $2)
    puppy_system_role(system, $2)
    # Allow the utility to write error messages.
    allow $2_system_t $1_job_t:fifo_file rw_fifo_file_perms;
    allow $2_system_t worker_t:fifo_file rw_fifo_file_perms;
')
##  Create a set of derived types for Puppy worker jobs.
template(`puppy_job_execute',`
    # Domain types for proxy and job.
    type $1_job_proxy_t;
    type $1_job_t;

    # Role assignments for proxy and job.
    role system_r types $1_job_proxy_t;
    role system_r types $1_job_t;

    # The executable type.
    type $1_job_exec_t;

    # Application domains for proxy and job.
    application_domain($1_job_t, $1_job_exec_t)
    application_domain($1_job_proxy_t, $1_job_exec_t)

    # The working script will report to the proxy script via stdio.
    allow $1_job_t $1_job_proxy_t:fifo_file rw_fifo_file_perms;

    # The transition program is always a Node.js program.
    puppy_node_exec($1_job_proxy_t)

    # FIXME: The working program is generally (not always FIXME) shell program.
    puppy_shell_exec($1_job_t)

    # Read and write to stdin, stout and stderr.
    allow $1_job_t self:fifo_file rw_fifo_file_perms;
    allow $1_job_proxy_t self:fifo_file rw_fifo_file_perms;

    # The proxy needs to execute Puppy executables.
    puppy_exec_puppy_bin($1_job_proxy_t)

    # The agent needs to execute Puppy system executables.
    puppy_exec_puppy_sbin($1_job_t)

    # Allow worker to read the NPM link to the executable.
    allow worker_t $1_job_exec_t:lnk_file read;

    # Alllow the proxy to read the NPM link to the executable.
    allow $1_job_proxy_t $1_job_exec_t:lnk_file read;

    allow $1_job_t worker_t:fifo_file rw_fifo_file_perms;
')
template(`puppy_job_as_root',`
    puppy_job_execute($1) 

    # Transition from worker to the proxy domain, from the transition program to
    # the sudo domain, from sudo domain to the job domain.
    domtrans_pattern(worker_t, $1_job_exec_t, $1_job_proxy_t)
    sudo_role_template($1_job_proxy, system_r, $1_job_proxy_t)
    domtrans_pattern($1_job_proxy_sudo_t, $1_job_exec_t, $1_job_t)

    allow $1_job_proxy_t self:fifo_file write;

    # The proxy sudo needs to read Puppy executables.
    puppy_read_puppy_sbin($1_job_proxy_sudo_t)

    allow $1_job_proxy_sudo_t worker_t:fifo_file rw_fifo_file_perms;
')
template(`puppy_job_as_worker',`
    puppy_job_execute($1) 
    # Transition from worker to the proxy domain, from the transition program to
    # the sudo domain, from sudo domain to the job domain.
    domtrans_pattern(worker_t, $1_job_exec_t, $1_job_proxy_t)
    domtrans_pattern($1_job_proxy_t, $1_job_exec_t, $1_job_t)
    # The proxy needs to read Puppy executables.
    puppy_read_puppy_sbin($1_job_proxy_t)
    # The proxy needs to read Puppy executables.
    puppy_read_puppy_sbin($1_job_proxy_t)

    # The agent needs to execute Puppy system executables.
    puppy_exec_puppy_sbin($1_job_t)

    corecmd_exec_shell($1_job_proxy_t)
    corecmd_exec_shell($1_job_t)
')
template(`puppy_rw_worker_fifo',`
    allow $1 $2_job_proxy_t:fifo_file rw_fifo_file_perms;
    allow $1 worker_t:fifo_file rw_fifo_file_perms;
')
