# Interfaces for public agent.
template(`puppydom_restricted_user_template',`
	gen_require(`
		attribute unpriv_userdomain;
	')

	puppydom_login_user_template($1)

	typeattribute $1_t unpriv_userdomain;
#	domain_interactive_fd($1_t)
')

#######################################
## <summary>
##	Allow a home directory for which the
##	role has read-only access.
## </summary>
## <desc>
##	<p>
##	Allow a home directory for which the
##	role has read-only access.
##	</p>
##	<p>
##	This does not allow execute access.
##	</p>
## </desc>
## <param name="role">
##	<summary>
##	The user role
##	</summary>
## </param>
## <param name="userdomain">
##	<summary>
##	The user domain
##	</summary>
## </param>
## <rolebase/>
#
#interface(`puppydom_ro_home_role',`
#	gen_require(`
#		type user_home_t, user_home_dir_t;
#	')

	##############################
	#
	# Domain access to home dir
	#

#	type_member $2 user_home_dir_t:dir user_home_dir_t;

	# read-only home directory
#	allow $2 user_home_dir_t:dir list_dir_perms;
#	allow $2 user_home_t:dir list_dir_perms;
#	allow $2 user_home_t:file entrypoint;
#	read_files_pattern($2, { user_home_t user_home_dir_t }, user_home_t)
#	read_lnk_files_pattern($2, { user_home_t user_home_dir_t }, user_home_t)
#	read_fifo_files_pattern($2, { user_home_t user_home_dir_t }, user_home_t)
#	read_sock_files_pattern($2, { user_home_t user_home_dir_t }, user_home_t)
#	files_list_home($2)
#')

#######################################
## <summary>
##	The template containing the most basic rules common to all users.
## </summary>
## <desc>
##	<p>
##	The template containing the most basic rules common to all users.
##	</p>
##	<p>
##	This template creates a user domain, types, and
##	rules for the user's tty and pty.
##	</p>
## </desc>
## <param name="userdomain_prefix">
##	<summary>
##	The prefix of the user domain (e.g., user
##	is the prefix for user_t).
##	</summary>
## </param>
## <rolebase/>
#
template(`puppydom_base_user_template',`

	gen_require(`
		attribute userdomain;
		class context contains;
	')

#	attribute $1_file_type;

	type $1_t, userdomain;
	domain_type($1_t)
	corecmd_shell_entry_type($1_t)
	corecmd_bin_entry_type($1_t)
	domain_user_exemption_target($1_t)
	ubac_constrained($1_t)
	role $1_r types $1_t;
	allow system_r $1_r;

#	term_user_pty($1_t, user_devpts_t)

#	term_user_tty($1_t, user_tty_device_t)

	allow $1_t self:process { signal_perms getsched setsched share getpgid setpgid setcap getsession getattr };
	allow $1_t self:fd use;
	allow $1_t self:fifo_file rw_fifo_file_perms;
	#allow $1_t self:unix_dgram_socket { create_socket_perms sendto };
	#allow $1_t self:unix_stream_socket { create_stream_socket_perms connectto };
	#allow $1_t self:shm create_shm_perms;
	#allow $1_t self:sem create_sem_perms;
	#allow $1_t self:msgq create_msgq_perms;
	#allow $1_t self:msg { send receive };
	#allow $1_t self:context contains;
#	dontaudit $1_t self:socket create;

#	allow $1_t user_devpts_t:chr_file { setattr rw_chr_file_perms };
#	term_create_pty($1_t, user_devpts_t)
	# avoid annoying messages on terminal hangup on role change
#	dontaudit $1_t user_devpts_t:chr_file ioctl;

#	allow $1_t user_tty_device_t:chr_file { setattr rw_chr_file_perms };
	# avoid annoying messages on terminal hangup on role change
#	dontaudit $1_t user_tty_device_t:chr_file ioctl;

#	kernel_read_kernel_sysctls($1_t)
#	kernel_dontaudit_list_unlabeled($1_t)
#	kernel_dontaudit_getattr_unlabeled_files($1_t)
#	kernel_dontaudit_getattr_unlabeled_symlinks($1_t)
#	kernel_dontaudit_getattr_unlabeled_pipes($1_t)
#	kernel_dontaudit_getattr_unlabeled_sockets($1_t)
#	kernel_dontaudit_getattr_unlabeled_blk_files($1_t)
#	kernel_dontaudit_getattr_unlabeled_chr_files($1_t)

#	dev_dontaudit_getattr_all_blk_files($1_t)
#	dev_dontaudit_getattr_all_chr_files($1_t)

	# When the user domain runs ps, there will be a number of access
	# denials when ps tries to search /proc. Do not audit these denials.
#	domain_dontaudit_read_all_domains_state($1_t)
#	domain_dontaudit_getattr_all_domains($1_t)
#	domain_dontaudit_getsession_all_domains($1_t)

	files_read_etc_files($1_t)
#	files_read_etc_runtime_files($1_t)
#	files_read_usr_files($1_t)
	# Read directories and files with the readable_t type.
	# This type is a general type for "world"-readable files.
#	files_list_world_readable($1_t)
#	files_read_world_readable_files($1_t)
#	files_read_world_readable_symlinks($1_t)
#	files_read_world_readable_pipes($1_t)
#	files_read_world_readable_sockets($1_t)
	# old broswer_domain():
#	files_dontaudit_list_non_security($1_t)
#	files_dontaudit_getattr_non_security_files($1_t)
#	files_dontaudit_getattr_non_security_symlinks($1_t)
#	files_dontaudit_getattr_non_security_pipes($1_t)
#	files_dontaudit_getattr_non_security_sockets($1_t)

#	libs_exec_ld_so($1_t)

#	miscfiles_read_localization($1_t)

#	sysnet_read_config($1_t)
')

template(`puppydom_login_user_template', `
	gen_require(`
		type user_home_t, user_home_dir_t;
		class context contains;
	')

	puppydom_base_user_template($1)

    corecmd_exec_shell($1_t)
#	puppydom_ro_home_role($1_r, $1_t)
    userdom_read_user_home_content_files($1_t)
#	read_files_pattern($1_t, { user_home_t user_home_dir_t }, user_home_t)

	#userdom_manage_tmpfs_role($1_r, $1_t)

	#userdom_exec_user_tmp_files($1_t)
	#userdom_exec_user_home_content_files($1_t)

	#userdom_change_password_template($1)

	##############################
	#
	# User domain Local policy
	#

	#allow $1_t self:capability { setgid chown fowner };
	#dontaudit $1_t self:capability { sys_nice fsetid };

	allow $1_t self:process ~{ setcurrent setexec setrlimit execmem execstack execheap };
	#dontaudit $1_t self:process setrlimit;
	#dontaudit $1_t self:netlink_route_socket { create ioctl read getattr write setattr append bind connect getopt setopt shutdown nlmsg_read nlmsg_write };

	allow $1_t self:context contains;

	kernel_dontaudit_read_system_state($1_t)

	#dev_read_sysfs($1_t)
	dev_read_urand($1_t)

	#domain_use_interactive_fds($1_t)
	# Command completion can fire hundreds of denials
	#domain_dontaudit_exec_all_entry_files($1_t)

	#files_dontaudit_list_default($1_t)
	#files_dontaudit_read_default_files($1_t)
	# Stat lost+found.
	#files_getattr_lost_found_dirs($1_t)

	#fs_get_all_fs_quotas($1_t)
	#fs_getattr_all_fs($1_t)
	#fs_getattr_all_dirs($1_t)
	#fs_search_auto_mountpoints($1_t)
	#fs_list_inotifyfs($1_t)
	#fs_rw_anon_inodefs_files($1_t)

	#auth_dontaudit_write_login_records($1_t)

# 	application_exec_all($1_t)



	# The library functions always try to open read-write first,
	# then fall back to read-only if it fails. 
	#init_dontaudit_rw_utmp($1_t)
	# Stop warnings about access to /dev/console
	#init_dontaudit_use_fds($1_t)
	#init_dontaudit_use_script_fds($1_t)

	#libs_exec_lib_files($1_t)

	#logging_dontaudit_getattr_all_logs($1_t)
')
