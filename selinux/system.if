# Allow a sudo context type to transtion to a system context type.
#   $1 - the program name to transtion from, i.e. port_unlabel
#   $2 - the program name to transtion to, i.e. port_list
template(`puppy_sudo_system', `
    gen_require(`
        type $2_system_t, $2_system_exec_t;
    ')
    domtrans_pattern($1_sudo_t, $2_system_exec_t, $2_system_t)
')
# Create a definition for a system program.
#   $1 - the type name prefix used to derive type names, i.e. app_list
template(`puppy_system', `
    gen_require(`
        type database_t, database_exec_t, $1_system_sudo_t;
    ')

    # The system domain.
    type $1_system_t;
    type $1_system_exec_t;
    
    # Run Node.js.
    puppy_node_exec($1_system_t)

    # Execute the puppy binary files.
    puppy_exec_puppy_bin($1_system_t)

    # Allow read and write of stdio.
    allow $1_system_t self:fifo_file rw_fifo_file_perms;

    # Allow sending of syslog messages.
    logging_send_syslog_msg($1_system_t)

    # Allow sudo to database.
    puppy_sudo($1_system)

    # Read link files created by NPM to the actual executable.
    read_lnk_files_pattern($1_system_t, $1_system_exec_t, $1_system_exec_t)

    # Create the application domain.
    application_domain($1_system_t, $1_system_exec_t)

    # Allow the database utility to write to distpatcher stdio.
    allow database_t $1_system_t:fifo_file rw_fifo_file_perms;

    # Query MySQL.
    puppy_mysql($1_system_t)

    # Execute the configuration reader.
    domtrans_pattern($1_system_sudo_t, database_exec_t, database_t)
')
# Allow the system type context to execute in a given role.
#   $1 - the role, i.e. system
#   $2 - the system program name, i.e. port_label
template(`puppy_system_role',`
    gen_require(`
        type $2_system_sudo_t, $2_system_t;
    ')

    # Allow the role to assume the generated domain types.
    role $1_r types $2_system_t;
    role $1_r types $2_system_sudo_t;
')
