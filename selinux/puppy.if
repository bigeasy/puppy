########################################
### <summary>
###  Assign permissions for a Node.js executable.
### </summary>
### <param name="domain">
###  <summary>
###  The application domain that will run node.
###  </summary>
### </param>
##
#
# Permissions necessary to execute a Puppy Node.js program.
#   $1 - full context type, i.e. worker_t
template(`puppy_node_exec',`
    # Node.js is a bin_t.
    corecmd_exec_bin($1)
    # The JIT generates executable code in writable memory.
    allow $1 self:process execmem;
    # The Aries DNS library read nsswitch.conf for DNS lookups, regardless of
    # whether node performs DNS lookups.
    sysnet_read_config($1)
    # Read the system page size from /proc/meminfo.
    kernel_read_system_state($1)
    # The Aries DNS library reads urandom for an encryption key it does not use.
    dev_read_urand($1)
    # Read and write stdin, stdout, and stderr.
    allow $1 self:fifo_file read;
    # The Aries DNS library reads /etc/nsswitch.conf.
    files_read_etc_files($1)
    # Read localization.
    miscfiles_read_localization($1)
')

# Permissions necessary to execute a Puppy shell program.
#   $1 - full context type, i.e. worker_t
template(`puppy_shell_exec',`
    # Read system page size from /proc/meminfo. 
    kernel_read_system_state($1)
    # Shell programs use utility programs.
    corecmd_exec_bin($1)
    # Read common shell functions.
    allow $1 private_functions_t:file read_file_perms;
    # Read localization.
    miscfiles_read_localization($1)
')

# Assign the delegate type to a number of roles.
#   $1 - full role, i.e. liminal_r
template(`puppy_delegate_roles',`
    gen_require(`
        type delegate_t, delegate_sudo_t, database_t;
    ')
    # The agent role will be able to assume the puppy_t and database_t domain types.
    # TODO Can I put these on one line?
    role $1 types delegate_t;
    role $1 types delegate_sudo_t;
    role $1 types database_t;
')

# Highly restricted user template for the public ssh gateway.
#   $1 - prefix for role and context type, i.e. public
template(`puppy_restricted_user_template',`
	gen_require(`
		attribute unpriv_userdomain;
		attribute userdomain;
		class context contains;
		type user_home_t, user_home_dir_t;
		class context contains;
	')
	type $1_t, userdomain;
	domain_type($1_t)
	corecmd_shell_entry_type($1_t)
 	corecmd_bin_entry_type($1_t)
	domain_user_exemption_target($1_t)
	ubac_constrained($1_t)
	role $1_r types $1_t;
	allow system_r $1_r;
	allow $1_t self:process { signal_perms getsched setsched share getpgid setpgid setcap getsession getattr };
	allow $1_t self:fd use;
	allow $1_t self:fifo_file rw_fifo_file_perms;
	files_read_etc_files($1_t)
    corecmd_exec_shell($1_t)
    userdom_read_user_home_content_files($1_t)
	allow $1_t self:process ~{ setcurrent setexec setrlimit execmem execstack execheap };
	allow $1_t self:context contains;
	kernel_dontaudit_read_system_state($1_t)
	dev_read_urand($1_t)
	typeattribute $1_t unpriv_userdomain;
')
# Read Puppy configuration files in "/etc/puppy".
#   $1 - full type context, i.e. user_config_t
template(`puppy_read_puppy_etc',`
    gen_require(`
        type puppy_t, puppy_etc_t;
    ')
    list_dirs_pattern($1, puppy_t, puppy_t)
    read_files_pattern($1, puppy_etc_t, puppy_etc_t)
    read_lnk_files_pattern($1, puppy_etc_t, puppy_etc_t)
')
# Read Puppy binary direcotries and files in /puppy/[^\/]+/bin.
#   $1 - full type context, i.e. protected_t
template(`puppy_read_puppy_bin',`
    gen_require(`
        type puppy_t, puppy_bin_t, puppy_lib_t;
    ')
    list_dirs_pattern($1, puppy_t, puppy_t)
    list_dirs_pattern($1, puppy_bin_t, puppy_bin_t)
    list_dirs_pattern($1, puppy_lib_t, puppy_lib_t)
    read_files_pattern($1, puppy_bin_t, puppy_bin_t)
    read_lnk_files_pattern($1, puppy_bin_t, puppy_bin_t)
')
# Read Puppy binary direcotries and files in /puppy/[^\/]+/sbin.
#   $1 - full type context, i.e. protected_t
template(`puppy_read_puppy_sbin',`
    gen_require(`
        type puppy_t, puppy_sbin_t;
    ')
    list_dirs_pattern($1, puppy_t, puppy_t)
    read_files_pattern($1, puppy_sbin_t, puppy_sbin_t)
    list_dirs_pattern($1, puppy_lib_t, puppy_lib_t)
')
# Execute a launcher program that in turn launches the real program.
#   $1 - the program prefix, i.e. worker
template(`puppy_try_catch',`
    type $1_try_t;

    # Catch launchers are all copies the same node program.
    puppy_node_exec($1_try_t)

    # Read puppy executables.
    puppy_exec_puppy_bin($1_try_t)

    # The executable type.
    type $1_try_exec_t;

    # Create the application domains.
    application_domain($1_try_t, $1_try_exec_t)
    application_domain($1_t, $1_exec_t)

    # Transition from try to the main domain.
    domtrans_pattern($1_try_t, $1_exec_t, $1_t)

    # Send the logging message.
    logging_send_syslog_msg($1_try_t)

    # Allow the program to read and write to the try proxy.
    allow $1_try_t self:fifo_file write;
    allow $1_t $1_try_t:fifo_file rw_fifo_file_perms;

    # Allow the try proxy to read the NPM link to the executable.
    read_lnk_files_pattern($1_try_t, $1_exec_t, $1_exec_t)
')
template(`puppy_exec_puppy_bin',`
    gen_require(`
        type puppy_t, puppy_bin_t, puppy_lib_t;
    ')
    list_dirs_pattern($1, puppy_t, puppy_t)
    read_files_pattern($1, puppy_bin_t, puppy_bin_t)
    read_lnk_files_pattern($1, puppy_bin_t, puppy_bin_t)
    list_dirs_pattern($1, puppy_bin_t, puppy_bin_t)
    read_files_pattern($1, puppy_lib_t, puppy_lib_t)
    read_lnk_files_pattern($1, puppy_lib_t, puppy_lib_t)
    list_dirs_pattern($1, puppy_lib_t, puppy_lib_t)
')
template(`puppy_exec_puppy_sbin',`
    gen_require(`
        type puppy_t, puppy_bin_t, puppy_lib_t, puppy_sbin_t;
    ')
    list_dirs_pattern($1, puppy_t, puppy_t)
    read_files_pattern($1, puppy_bin_t, puppy_bin_t)
    read_files_pattern($1, puppy_sbin_t, puppy_sbin_t)
    read_files_pattern($1, puppy_lib_t, puppy_lib_t)
    read_lnk_files_pattern($1, puppy_lib_t, puppy_lib_t)
')
########################################
## <summary>
##	Query MySQL.
## </summary>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
template(`puppy_postgresql',`
    sysnet_dns_name_resolve($1)
    mysql_tcp_connect($1)
    mysql_stream_connect($1)
    mysql_rw_db_sockets($1)
    # Someone, maybe MySQL, maybe DNS, wants to read localization.
    miscfiles_read_localization($1)
    corenet_tcp_connect_postgresql_port($1)
    corenet_sendrecv_postgresql_client_packets($1)
    postgresql_stream_connect($1)
')


## <summary>Execute a command with a substitute user</summary>

#######################################
## <summary>
##	The role template for the sudo module.
## </summary>
## <desc>
##	<p>
##	This template creates a derived domain which is allowed
##	to change the linux user id, to run commands as a different
##	user.
##	</p>
## </desc>
## <param name="role_prefix">
##	<summary>
##	The prefix of the user role (e.g., user
##	is the prefix for user_r).
##	</summary>
## </param>
## <param name="user_role">
##	<summary>
##	The user role.
##	</summary>
## </param>
## <param name="user_domain">
##	<summary>
##	The user domain associated with the role.
##	</summary>
## </param>
#
template(`puppy_sudo',`
	gen_require(`
		type sudo_exec_t;
		attribute sudodomain;
	')

	##############################
	#
	# Declarations
	#

	type $1_sudo_t, sudodomain; 
	application_domain($1_sudo_t, sudo_exec_t)
	domain_interactive_fd($1_sudo_t)
	domain_role_change_exemption($1_sudo_t)
	ubac_constrained($1_sudo_t)

	##############################
	#
	# Local Policy
	#

	# Use capabilities.
	allow $1_sudo_t self:capability { fowner setuid setgid dac_override sys_nice sys_resource };
	allow $1_sudo_t self:process ~{ ptrace setcurrent setexec setfscreate setrlimit execmem execstack execheap };
	allow $1_sudo_t self:process { setexec setrlimit };
	allow $1_sudo_t self:fd use;
	allow $1_sudo_t self:fifo_file rw_fifo_file_perms;
	allow $1_sudo_t self:shm create_shm_perms;
	allow $1_sudo_t self:sem create_sem_perms;
	allow $1_sudo_t self:msgq create_msgq_perms;
	allow $1_sudo_t self:msg { send receive };
	allow $1_sudo_t self:unix_dgram_socket create_socket_perms;
	allow $1_sudo_t self:unix_stream_socket create_stream_socket_perms;
	allow $1_sudo_t self:unix_dgram_socket sendto;
	allow $1_sudo_t self:unix_stream_socket connectto;
	allow $1_sudo_t self:key manage_key_perms;

	allow $1_sudo_t $1_t:key search;

	# Enter this derived domain from the user domain
	domtrans_pattern($1_t, sudo_exec_t, $1_sudo_t)

	allow $1_t $1_sudo_t:fd use;
	allow $1_t $1_sudo_t:fifo_file rw_fifo_file_perms;
	allow $1_t $1_sudo_t:process signal_perms;

	kernel_read_kernel_sysctls($1_sudo_t)
	kernel_read_system_state($1_sudo_t)
	kernel_link_key($1_sudo_t)

	corecmd_read_bin_symlinks($1_sudo_t)
	corecmd_exec_all_executables($1_sudo_t)

#	dev_getattr_fs($1_sudo_t)
	dev_read_urand($1_sudo_t)
	dev_rw_generic_usb_dev($1_sudo_t)
	dev_read_sysfs($1_sudo_t)

	domain_use_interactive_fds($1_sudo_t)
	domain_sigchld_interactive_fds($1_sudo_t)
	domain_getattr_all_entry_files($1_sudo_t)

	files_read_etc_files($1_sudo_t)
	files_read_var_files($1_sudo_t)
	files_read_usr_symlinks($1_sudo_t)
	files_getattr_usr_files($1_sudo_t)
	# for some PAM modules and for cwd
	files_dontaudit_search_home($1_sudo_t)
	files_list_tmp($1_sudo_t)

	fs_search_auto_mountpoints($1_sudo_t)
	fs_getattr_xattr_fs($1_sudo_t)

	selinux_validate_context($1_sudo_t)
	selinux_compute_relabel_context($1_sudo_t)

	term_getattr_pty_fs($1_sudo_t)
	term_relabel_all_ttys($1_sudo_t)
	term_relabel_all_ptys($1_sudo_t)

	# sudo stores a token in the pam_pid directory
	auth_manage_pam_pid($1_sudo_t)
	auth_use_nsswitch($1_sudo_t)

	init_rw_utmp($1_sudo_t)

	logging_send_audit_msgs($1_sudo_t)
	logging_send_syslog_msg($1_sudo_t)

	miscfiles_read_localization($1_sudo_t)

	seutil_search_default_contexts($1_sudo_t)
	seutil_libselinux_linked($1_sudo_t)

	userdom_spec_domtrans_all_users($1_sudo_t)
	userdom_manage_user_home_content_files($1_sudo_t)
	userdom_manage_user_home_content_symlinks($1_sudo_t)
	userdom_manage_user_tmp_files($1_sudo_t)
	userdom_manage_user_tmp_symlinks($1_sudo_t)
	userdom_use_user_terminals($1_sudo_t)
	# for some PAM modules and for cwd
	userdom_dontaudit_search_user_home_content($1_sudo_t)

    puppy_read_puppy_bin($1_sudo_t)
    puppy_read_puppy_sbin($1_sudo_t)
')

template(`puppy_read_cache_files',`
    gen_require(`
        type puppy_cache_t;
    ')
    list_dirs_pattern($1, puppy_cache_t, puppy_cache_t)
    read_files_pattern($1, puppy_cache_t, puppy_cache_t)
    files_var_filetrans($1, puppy_cache_t, { file dir })
')
template(`puppy_manage_cache_files',`
    gen_require(`
        type puppy_cache_t;
    ')
    manage_dirs_pattern($1, puppy_cache_t, puppy_cache_t)
    manage_files_pattern($1, puppy_cache_t, puppy_cache_t)
    files_var_filetrans($1, puppy_cache_t, { file dir })
')
