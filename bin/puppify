#!/bin/bash

if [ $(whoami) != "root" ]; then
    echo "Must run as root." 1>&2
    exit 1
fi

function make_dir()
{
    directory=$1
    ownership=$2
    perms=$3
    if [ ! -e $directory ]
    then
        /bin/mkdir -p $directory
    fi
    /bin/chown $ownership $directory
    /bin/chmod $perms $directory
#    /sbin/restorecon -R $directory
}

function make_group()
{
    group=$1
    gid=$2
    cut -d: -f1 /etc/group | grep '^'$group'$' > /dev/null
    ret=$?
    if [ $ret != 0 ]
    then
        echo "Creating group $group."
        /usr/sbin/groupadd --gid $gid $group
    else
        echo "Group $group exists."
    fi
}

function make_user()
{
    user=$1
    uid=$2
    gid=$3
    cut -d: -f1 /etc/passwd | grep '^'$user'$' > /dev/null
    ret=$?
    if [ $ret != 0 ]
    then
        echo "Creating user $user."
        /usr/sbin/useradd --uid $uid --gid $gid $user
    else
        echo "User $user exists."
    fi
}

# Create the stunnel daemon user.
make_group public 209
make_user public 209 209

# Create the stunnel daemon user.
make_group stunnel 206
make_user stunnel 206 206

# Create general puppified operations user.
make_group puppy 207
make_user puppy 207 207

# Create the vhosts daemon user.
make_group vhosts 208
make_user vhosts 208 208

# Create the worker daemon and enqueue task users.
make_group worker 204
make_user enqueue 203 204 
make_user worker 204 204

# Create the worker spool directory.
make_dir /var/spool/puppy worker:worker 770

# Creates a directory tree by copying a directory tree, selecting the
# directories with a particular permissions setting.
function make_directories()
{
    path=$1
    prefix=$2
    perm=$3
    ownership=$4
    for file in $(/bin/find $path -type d -perm $perm | sort)
    do
        dest=$prefix$file
        if [ ! -e $dest ]
        then
            echo "Creating directory $dest."
            /bin/mkdir $dest
        fi
        /bin/chmod $perm $dest
        /bin/chown $ownership $dest
        /sbin/restorecon $dest
    done
}

# git does not perserve file permissions, in case you're wondering.
#  http://kerneltrap.org/mailarchive/git/2008/12/5/4327894
/bin/find etc opt -type d -exec /bin/chmod 755 {} \;
/bin/chmod 644 etc/init/*
/bin/chmod 440 etc/sudoers.d/*
/bin/chmod 644 etc/selinux/targeted/contexts/users/*
/bin/chmod 640 opt/share/puppy/private/bin/functions
/bin/chmod 700 opt/share/puppy/private/bin/*_*
/bin/chmod 700 opt/share/puppy/private/sbin/*_*
/bin/chmod 600 etc/ssh/sshd_config

# Copy the etc and opt directory structures.
make_directories etc / 755 root:root
make_directories opt / 755 root:root

function copy_files()
{
    path=$1
    prefix=$2
    perm=$3
    ownership=$4
    for file in $(/bin/find $path -type f -perm $perm | sort)
    do
        dest=$prefix$file
        if [ ! -e $dest ]
        then
            echo "Installing program $dest."
            /bin/cp $file $dest
        fi
        /bin/chmod $perm $dest
        /bin/chown $ownership $dest
        /sbin/restorecon $dest
    done
}

# Copy the opt mount point.
copy_files opt/share/puppy/private/bin / 700 worker:worker
copy_files opt/share/puppy/private/bin / 640 worker:root
copy_files opt/share/puppy/private/sbin / 700 root:root

# Copy the public transition programs.
copy_files opt/share/puppy/public/bin / 700 public:public

# Create the authorized_keys file that will launch /opt/bin/public.
/usr/bin/sudo -u public /bin/mkdir -p /home/public/.ssh
/bin/touch /home/public/.ssh/authorized_keys
/bin/chown public:public /home/public/.ssh/authorized_keys
/bin/chmod 600 /home/public/.ssh/authorized_keys
/bin/cat home/public/ssh/authorized_keys >> /home/public/.ssh/authorized_keys

# Copy the etc configuration files.
copy_files etc / 644 root:root
copy_files etc / 440 root:root
copy_files etc / 600 root:root

# We do not want the agent accounts to run `/etc/bashrc` at startup, so delete
# the `~/.bashrc` files for those accounts.
for agent in public enqueue; do
    echo "# Do nothing." > /home/$agent/.bashrc
done
