#!/usr/bin/env _coffee

fs = require "fs"
ec2 = require "ec2"
dns = require "dns"
OptionParser = require("coffee-script/lib/coffee-script/optparse").OptionParser

parser = new OptionParser [
  [ "-n", "--name [NAME]", "fully qualified domain name" ]
  [ "-h", "--help", "display puppy help" ]
]

usage = (message) ->
  process.stderr.write "error: #{message}\n"
  process.stderr.write parser.help()
  process.stderr.write "\n"
  process.exit 1

try
  options = parser.parse process.argv.slice(2)
catch e
  usage "Invalid arguments."

if not options.name
  usage "Host name is required."

match = ///
    ^
    \w+\.
    (balance|user|data)\.
    (north|south|east|west)\.
    (california|oregon|ireland|singapore|tokyo|virginia)\.
    runpup\.com
    $
  ///.exec(options.name)

if not match
  process.stderr.write "Invalid hostname.\n"
  usage()
[ type, zone, region ] = match.slice 1

architecture = { balance: "i386", user: "i386", data: "i386" }[type]

endpoint = { california: "us-west-1", oregon: "us-west-2", virginia: "us-east-1" }[region]
if not endpoint
  usage "Unknown region."

run = (_) ->
  configuration = JSON.parse fs.readFile "#{process.env["HOME"]}/.aws", _
  configuration.endpoint = endpoint
  ec2 = ec2 configuration

  address = dns.lookup options.name, 4, _

  response = ec2 "DescribeInstances", {}, _
  instance = do ->
    for reservation in response.reservationSet
      for instance in reservation.instancesSet
        if instance.instanceState.name is "running"
          for tag in instance.tagSet
            if tag.key is "Name" and tag.value is options.name
              return instance

  if not instance
    usage "No such instance is running."

  ec2 "AssociateAddress", {
    PublicIp: address
    InstanceId: instance.instanceId
  }, _

run (error) -> throw error if error
# vim: ft=coffee ts=2 sw=2:
