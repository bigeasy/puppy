#!/usr/bin/env coffee

ec2 = require "ec2"
fs = require "fs"
{OptionParser}  = require "coffee-script/lib/optparse"

parser = new OptionParser [
  [ "-n", "--name [NAME]", "fully qualified domain name" ]
  [ "-h", "--help", "display puppy help" ]
]

usage = (message) ->
  process.stderr.write "error: #{message}\n"
  process.stderr.write parser.help()
  process.stderr.write "\n"
  process.exit 1

try
  options         = parser.parse process.argv.slice(2)
catch e
  usage "Invalid arguments."

if not options.name
  usage "Host name is required."

match = ///
    ^
    \w+\.
    (balance|user|data)\.
    (north|south|east|west)\.
    (california|ireland|singapore|tokyo|virginia)\.
    runpup\.com
    $
  ///.exec(options.name)

if not match
  process.stderr.write "Invalid hostname.\n"
  usage()
[ type, zone, region ] = match.slice 1

switch type
  when "balance", "user"
    architecture = "i386"
  when "data"
    architecture = "x86_64"
  else
    usage "Unknown machine type."

zone = { north: "a", south: "b", east: "c", west: "d" }[zone]
if not zone
  usage "Unknown zone."

endpoint = { virginia: "us-east-1", california: "us-west-1" }[region]
if not endpoint
  usage "Unknown region."

configuration = JSON.parse fs.readFileSync "#{process.env["HOME"]}/.aws", "utf8"
configuration.endpoint = endpoint
client = ec2.createClient configuration

request = {}
client.call "DescribeInstances", {}, (response) ->
  findInstance = ->
    for reservation in response.reservationSet
      for instance in reservation.instancesSet
        if instance.instanceState.name is "running"
          for tag in instance.tagSet
            if tag.key is "Name" and tag.value is options.name
              return instance
    false
  request.instance = findInstance()
client.call "DescribeVolumes", {}, (response) ->
  request.volumes = []
  for volume in response.volumeSet
    tags = {}
    for tag in volume.tagSet or []
      tags[tag.key] =  tag.value or true
    if tags.Puppified and tags.Host is options.name
      request.volumes.push volume
    volume.tags = tags
  volumes = []
  for volume in request.volumes
    if volume.status isnt "available"
      attachment = volume.attachmentSet[0]
      if attachment.instanceId is request.instance.instanceId
        continue
      usage "The volume #{volume.tags.Name} is not available."
    volumes.push volume
  request.volumes = volumes
  for volume in request.volumes
    client.call "AttachVolume", {
      InstanceId: request.instance.instanceId
      VolumeId: volume.volumeId
      Device: volume.tags.Device
    }
    client.poll "DescribeVolumes", {
      "VolumeId.1": volume.volumeId
    }, (response) ->
      response.volumeSet[0].attachmentSet[0].status is "attached"

client.execute()
