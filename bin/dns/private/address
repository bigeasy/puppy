#!/usr/bin/env coffee

ec2 = require "ec2"
fs = require "fs"
{OptionParser}  = require "coffee-script/lib/optparse"

parser = new OptionParser [
  [ "-r", "--region [NAME]", "region" ]
  [ "-a", "--axis [NAME]", "axis" ]
  [ "-h", "--help", "display puppy help" ]
]

usage = (message) ->
  process.stderr.write "error: #{message}\n"
  process.stderr.write parser.help()
  process.stderr.write "\n"
  process.exit 1

try
  options         = parser.parse process.argv.slice(2)
catch e
  usage "Invalid arguments."

if not options.region
  usage "Region is required."
if not options.axis
  usage "Axis is required."

directions = { "vertical": [ "north", "south" ], "horizontal": [ "east", "west" ] }[options.axis]
if not directions
  usage "Unknown axis."

endpoint = { california: "us-west-1", virginia: "us-east-1" }[options.region]
if not endpoint
  usage "Unknown region."

configuration = JSON.parse fs.readFileSync "#{process.env["HOME"]}/.aws", "utf8"
configuration.endpoint = endpoint
client = ec2.createClient configuration

process.stdout.on "error", (exception) ->
  throw exception unless exception.code is "EPIPE"

request = {}
client.call "DescribeInstances", {}, (response) ->
  request.instances = []
  for reservation in response.reservationSet
    for instance in reservation.instancesSet
      if instance.instanceState.name is "running"
        for tag in instance.tagSet
          if tag.key is "Name"
            match = ///
              ^
              \w+\.\w+\.
              (north|south|east|west)\.
              (california|ireland|singapore|tokyo|virginia)\.
              runpup\.com
              $
            ///.exec tag.value
            if match
              [ direction, region ] = match.slice 1
              if region is options.region and directions.indexOf(direction) isnt -1
                request.instances.push instance
  # We check each write to stdout to ensure that stdout is still open, because
  # the bash programs that used this script will sometimes break from the loops
  # they use to process the output, which causes bash to close the pipe.
  for instance in request.instances
    for tag in instance.tagSet
      if tag.key is "Name"
        name = tag.value
    if not process.stdout.write "#{name} #{instance.privateIpAddress}\n"
      break

client.execute()
# vim: ft=coffee ts=2 sw=2:
