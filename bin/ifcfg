#!/usr/bin/env coffee

http = require "http"
querystring = require "querystring"
fs = require "fs"
Step = require "step"

linodeId = process.argv.slice(2).shift()

configuration = JSON.parse(fs.readFileSync "#{process.env["HOME"]}/.linode", "utf8")

linode = (params, callback) ->
  params.api_key = configuration.api_key
  query = []
  for k, v of params
    query.push "#{querystring.escape(k)}=#{querystring.escape(v)}"
  # Connect to the Linode API server, gather the response, and feed it to the
  # callback function.
  client = http.createClient 443, "api.linode.com", true
  headers = { host: "api.linode.com" }
  request = client.request "GET", ("/?" + query.join("&")), headers
  request.end()
  request.on "response", (response) ->
    body = ""
    response.setEncoding "utf8"
    response.on "data", (chunk) ->
      body += chunk
    response.on "end", () ->
      callback(response, JSON.parse(body))

forward = (callback) ->
  ->
    params = []
    for param in arguments
      params.push param
    callback.apply this, params
    undefined

Step(
  forward ->
    linode({ api_action:  "linode.ip.list", LinodeID: linodeId }, this)
  (response, body) ->
    for ip in body.DATA
      if ip.ISPUBLIC
        gateway = ip.IPADDRESS
        gateway = gateway.replace /\d+$/, "1"
        if /.runpup.com$/.test(ip.RDNS_NAME)
          device = "eth0"
        else
          device = "eth0:0"
        fs.writeFileSync "ifcfg-#{device}", """
        DEVICE=#{device}
        BOOTPROTO=none
        ONBOOT=yes
        IPADDR=#{ip.IPADDRESS}
        NETMASK=255.255.255.0
        GATEWAY=#{gateway}
        
        """, "utf8"
      else
        fs.writeFileSync "ifcfg-eth0:1", """
        DEVICE=eth0:1
        BOOTPROTO=none
        ONBOOT=yes
        IPADDR=#{ip.IPADDRESS}
        NETMASK=255.255.128.0
        
        """, "utf8"
)
