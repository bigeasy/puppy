#!/bin/bash

# Maintaining the file context definitions got tedious. NPM went from generating
# two artifacts that need labeling to three, and the third is buried deep in the
# library directory tree. At the same time, many programs will be launched
# through an exception reporting launcher, adding another artifact.

# This script will generate the appropriate file context definitions for based
# on a template that names the program and describes its type. It will print a
# line verbatim if it does not recognize the type, so that ordinary file context
# definitions can be added to a template and they will pass through.

cd $(dirname $0)
cd ../..

for file in $(ls selinux/*.fc.template)
do
    project=$(/bin/basename $file | sed s/.fc.template$//)
    while read line
    do
        if [ "${line:0:1}" == "#" ]; then
            continue
        fi
        fields=($line)
        if [[ "${fields[2]}" == *_* ]]; then
            context="${fields[2]}"
        elif [ ! -z "${fields[2]}" ]; then
            context="${fields[0]}_${fields[2]}"
        elif [ "${fields[1]}" == "job" ]; then
            context="${fields[0]}_job"
        else
            context="${fields[0]}"
        fi
        gen_context="gen_context(system_u:object_r:${context}_exec_t, s0)"
        if [ "${fields[1]}" == "try" ]; then
            gen_try_context="gen_context(system_u:object_r:${context}_try_exec_t, s0)"
            echo "/puppy/$project/bin/${fields[0]} $gen_context"
            echo "/puppy/$project/bin/${fields[0]}_try $gen_try_context"
            echo ""
        elif [ "${fields[1]}" == "job" ]; then
            echo "/puppy/$project/bin/${fields[0]} $gen_context"
            echo "/puppy/$project/sbin/${fields[0]} $gen_context"
            echo ""
        elif [ "${fields[1]}" == "direct" ]; then
            echo "/puppy/$project/bin/${fields[0]} $gen_context"
            echo ""
        else
            echo $line
        fi
    done < $file > selinux/$project.fc
done
