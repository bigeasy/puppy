#!/usr/bin/env _coffee

alpha = [
  "Alvar"
  "Bouny"
  "Clio"
  "Dupre"
  "Elba"
  "Foy"
  "Girod"
  "Hayne"
  "Irby"
  "Jena"
  "Kepler"
  "Law"
  "Miro"
  "Neron"
  "Odin"
  "Praro"
  "Quince"
  "Reynes"
  "Soniat"
  "Tonti"
  "Ulloa"
  "Verna"
  "Water"
  "Zamon"
]

ec2 = require "ec2"
fs = require "fs"
dns = require "dns"
OptionParser = require("coffee-script/lib/coffee-script/optparse").OptionParser

parser = new OptionParser [
  [ "-n", "--name [NAME]", "fully qualified domain name" ]
  [ "-h", "--help", "display puppy help" ]
]

usage = (message) ->
  process.stderr.write "error: #{message}\n"
  process.stderr.write parser.help()
  process.stderr.write "\n"
  process.exit 1

try
  options = parser.parse process.argv.slice(2)
catch e
  usage "Invalid arguments."

if not options.name
  usage "Host name is required."

match = ///
    ^
    \w+\.
    (balance|user|data|image)\.
    (?:north|south|east|west)\.
    (california|ireland|oregon|singapore|tokyo|virginia)\.
    runpup\.com
    $
  ///.exec(options.name)

if not match
  process.stderr.write "Invalid hostname.\n"
  usage()
[ type, region ] = match.slice 1

endpoint = { california: "us-west-1", oregon: "us-west-2", virginia: "us-east-1" }[region]
if not endpoint
  usage "Unknown region."

run = (_) ->
  configuration = JSON.parse fs.readFile "#{process.env["HOME"]}/.aws", "utf8", _
  configuration.endpoint = endpoint
  ec2 = ec2 configuration

  request = {}
  response = ec2 "DescribeInstances", {}, _
  instance = do ->
    for reservation in response.reservationSet
      for instance in reservation.instancesSet
        if instance.instanceState.name isnt "terminated"
          for tag in instance.tagSet
            if tag.key is "Name" and tag.value is options.name
              return instance

  for mapping in instance.blockDeviceMapping
    if mapping.deviceName is "/dev/sda1"
      volumeId = mapping.ebs.volumeId
      break

  if not instance
    usage "Cannot find instance."

  architecture = instance.architecture
  kernel = {
      california: { "i386": "aki-99a0f1dc", "x86_64": "aki-9ba0f1de" }
      virginia: { "i386": "aki-407d9529", "x86_64": "aki-427d952b" }
      oregon: { "i386": "aki-c2e26ff2", "x86_64": "aki-98e26fa8"}
  }[region][architecture]

  response = ec2 "DescribeImages", { "Owner.1": "self" }, _
  current = do ->
    for image in response.imagesSet
      count = 0
      for tag in image.tagSet or []
        if image.architecture is architecture
          if tag.key is 'Puppified'
            count++
          if tag.key is 'Redux'
            count++
      if count is 1
        base = image
      else if count is 2
        usage "A redux image for this architecture already exists."
    base

  if current
    for tag in current.tagSet
      if tag.key is "Version"
        index = alpha.indexOf(tag.value) + 1
        if index isnt alpha.length
          version = alpha[index]
          break
  if not version
    version = alpha[0]
  response = ec2 "DescribeSnapshots", {}, _
  for snapshot in response.snapshotSet
    tags = {}
    for tag in snapshot.tagSet or []
      tags[tag.key] = tag.value or true
    if tags.Puppified and tags.Architecture is architecture and tags.Redux
      usage "A redux snapshot for this architecture already exists."

  if instance.instanceState.name != "stopped"
    ec2 "StopInstances", { "InstanceId.1": instance.instanceId }, _

  loop
    response = ec2 "DescribeInstances", { "InstanceId.1": instance.instanceId }, _
    break if response.reservationSet[0].instancesSet[0].instanceState.name is "stopped"


  snapshot = ec2 "CreateSnapshot", {
    "VolumeId": volumeId
    "Description": "Puppy 16 #{architecture} #{version}"
  }, _
  loop
    response = ec2 "DescribeSnapshots", {}, _
    done = do ->
      for candidate in response.snapshotSet
        if candidate.snapshotId is snapshot.snapshotId
          return candidate.status is "completed"
    break if done

  ec2 "CreateTags", {
    "ResourceId.1": snapshot.snapshotId
    "Tag.1.Key": "Name"
    "Tag.1.Value": "Puppy 16 #{architecture} #{version}"
    "Tag.2.Key": "Puppified"
    "Tag.2.Value": ""
    "Tag.3.Key": "Redux"
    "Tag.3.Value": ""
    "Tag.4.Key": "Version"
    "Tag.4.Value": version
    "Tag.5.Key": "Architecture"
    "Tag.5.Value": architecture
  }, _

  image = ec2 "RegisterImage", {
    Name: "Puppy 16 #{architecture} #{version}"
    Description: "Puppy 16 #{architecture}"
    Architecture: architecture
    RootDeviceName: "/dev/sda1"
    KernelId: kernel
    "BlockDeviceMapping.1.DeviceName": "/dev/sda1"
    "BlockDeviceMapping.1.Ebs.SnapshotId": snapshot.snapshotId
  }, _
  loop
    response = ec2 "DescribeImages", { "Owner.1": "self" }, _
    done = do ->
      for candidate in response.imagesSet
        if candidate.imageId is image.imageId
          return true
    break if done
  ec2 "CreateTags", {
    "ResourceId.1": image.imageId
    "Tag.1.Key": "Name"
    "Tag.1.Value": "Puppy 16 #{architecture} #{version}"
    "Tag.2.Key": "Puppified"
    "Tag.2.Value": ""
    "Tag.3.Key": "Redux"
    "Tag.3.Value": ""
    "Tag.4.Key": "Version"
    "Tag.4.Value": version
  }, _

run (error) -> throw error if error
# vim: ft=coffee:
