#!/usr/bin/env _coffee

fs = require "fs"
ec2 = require "ec2"
dns = require "dns"
{OptionParser}  = require "coffee-script/lib/coffee-script/optparse"

parser = new OptionParser [
  [ "-n", "--architecture [NAME]", "architecture name" ]
  [ "-r", "--region [NAME]", "region" ]
  [ "-h", "--help", "display puppy help" ]
]

usage = (message) ->
  process.stderr.write "error: #{message}\n"
  process.stderr.write parser.help()
  process.stderr.write "\n"
  process.exit 1

try
  options         = parser.parse process.argv.slice(2)
catch e
  usage "Invalid arguments."

if not options.architecture
  usage "Architecture is required."

endpoint = { california: "us-west-1", oregon: "us-west-2", virginia: "us-east-1" }[options.region]
if not endpoint
  usage "Unknown region."

run = (_) ->
  configuration = JSON.parse fs.readFile "#{process.env["HOME"]}/.aws", "utf8", _
  configuration.endpoint = endpoint
  ec2 = ec2 configuration

  for image in ec2("DescribeImages", { "Owner.1": "self" }, _).imagesSet
    count = 0
    for tag in image.tagSet
      if image.architecture is options.architecture
        if tag.key is 'Puppified'
          count++
        if tag.key is 'Redux'
          count++
    if count is 1
      outgoing = image
    else if count is 2
      redux = image

  if not redux
    usage "Cannot find a redux image."

  snapshotId = (instance) ->
    for mapping in instance.blockDeviceMapping
      if mapping.deviceName
        return mapping.ebs.snapshotId

  if outgoing
    ec2 "DeregisterImage", { ImageId: outgoing.imageId }, _
    loop
      response = ec2 "DescribeImages", { "Owner.1": "self" }, _
      exists = do ->
        for image in response.imagesSet
          if image.imageId is outgoing.imageId
            return true
      break if not exists
    ec2 "DeleteSnapshot", { SnapshotId: snapshotId(outgoing) }, _

  ec2 "DeleteTags", {
    "ResourceId.1": redux.imageId
    "ResourceId.2": snapshotId(redux)
    "Tag.1.Key": "Redux"
  }, _

run (error) -> throw error if error
# vim: ft=coffee ts=2 sw=2:
