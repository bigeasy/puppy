#!/usr/bin/env coffee

ec2 = require "ec2"
fs = require "fs"
{OptionParser}  = require "coffee-script/lib/optparse"

parser = new OptionParser [
  [ "-r", "--region [NAME]", "region" ]
  [ "-a", "--axis [NAME]", "axis" ]
  [ "-h", "--help", "display puppy help" ]
]

usage = (message) ->
  process.stderr.write "error: #{message}\n"
  process.stderr.write parser.help()
  process.stderr.write "\n"
  process.exit 1

try
  options         = parser.parse process.argv.slice(2)
catch e
  usage "Invalid arguments."

if not options.region
  usage "Region is required."
if not options.axis
  usage "Axis is required."

directions = { "vertical": [ "north", "south" ], "horizontal": [ "east", "west" ] }[options.axis]
if not directions
  usage "Unknown axis."

region = { virginia: "us-east-1" }[options.region]
if not region
  usage "Unknown region."

configuration = JSON.parse fs.readFileSync "#{process.env["HOME"]}/.aws", "utf8"
client = ec2.createClient configuration

request = {}
describeInstances = (callback) ->
  client.call "DescribeInstances", {}, (response) ->
    instances = []
    for reservation in response.reservationSet
      for instance in reservation.instancesSet
        if instance.instanceState.name is "running"
          for tag in instance.tagSet
            if tag.key is "Name"
              match = ///
                ^
                \w+\.\w+\.
                (north|south|east|west)\.
                (california|ireland|singapore|tokyo|virginia)\.
                runpup\.com
                $
              ///.exec tag.value
              if match
                [ direction, region ] = match.slice 1
                if region is options.region and directions.indexOf(direction) isnt -1
                  instances.push instance
    request.instances = {}
    for instance in instances
      for tag in instance.tagSet
        if tag.key is "Name"
          request.instances[tag.value] = instance
    callback()

servers =
  data:
    primary: "alvar.data.#{directions[0]}.#{options.region}.runpup.com"
    secondary: "alvar.data.#{directions[1]}.#{options.region}.runpup.com"

dump = (value) ->
  process.stdout.write require("sys").inspect value, false, Number.MAX_VALUE
  process.stdout.write "\n"

run = (command, splat...) ->
  callback = splat.pop()
  child = spawn command, splat, { customFds: [ 0, 1, 2] }
  child.on "exit", callback
  child

{spawn} = require "child_process"

launchDataServers = ->
  describeInstances ->
    waiting = 1
    dataLaunched = (code) ->
      if code isnt 0
        throw new Error ("Cannot launch data servers.")
      if --waiting is 0
        process.stdout.write "All data servers launched.\n"
        launchPrimaryNameserver()
    for key, name of servers.data
      if not request.instances[name]
        waiting++
        run "#{__dirname}/../instance/launch", "--name", name, dataLaunched
    dataLaunched(0)
  client.execute()

launchPrimaryNameserver = ->
   run "/usr/bin/sudo", "-H", "#{__dirname}/../../var/bin/dns/private/config", (code) ->
    if code isnt 0
      throw new Error ("Cannot launch primary private nameserver.")
    process.stdout.write "Primary private namserver configured.\n"

launchSecondaryNamservers = ->

launchDataServers()
# vim: ft=coffee ts=2 sw=2:
